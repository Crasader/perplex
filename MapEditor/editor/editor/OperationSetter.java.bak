package editor;

//should modify
import javax.swing.*;

/**
 操作的设置窗口。
 */
public abstract class OperationSetter
	extends OKCancelDialog {
	protected MainFrame mainFrame;

	public OperationSetter(JDialog owner, MainFrame mainFrame) {
		super(owner);
		init(mainFrame);
	}

	public OperationSetter(JFrame owner, MainFrame mainFrame) {
		super(owner);
		init(mainFrame);
	}

	private void init(MainFrame mainFrame) {
		this.mainFrame = mainFrame;
		setDefaultCloseOperation(DISPOSE_ON_CLOSE);
	}

	public void show() {
		if (getOperation() == null) {
			return;
		}
		super.show();
	}

	public abstract Operation getOperation();

	public static OperationSetter createSetter(JDialog owner, MainFrame mainFrame, Operation operation) {
		if (operation == null) {
			return null;
		}
		OperationSetter result = null;
		switch (operation.getType()) {
			case Operation.SWITCH_CHANGE:
				result = new SwitchChangeSetter(owner, mainFrame, (SwitchChange) operation);
				break;
			case Operation.COMMON_DIALOG:
				result = new CommonDialogSetter(owner, mainFrame, (CommonDialog) operation);
				break;
			case Operation.DELAY:
				result = new DelaySetter(owner, mainFrame, (Delay)operation);
				break;
			case Operation.UNIT_PATH_MOVE:
				result = new UnitPathMoveSetter(owner, mainFrame, (UnitPathMove) operation);
				break;
			case Operation.COUNTER_CHANGE:
				result = new CounterChangeSetter(owner, mainFrame, (CounterChange) operation);
				break;
			case Operation.UNIT_APPEAR:
				result = new UnitAppearSetter(owner, mainFrame, (UnitAppear) operation);
				break;
			case Operation.UNIT_DISAPPEAR:
				result = new UnitDisappearSetter(owner, mainFrame, (UnitDisappear) operation);
				break;
			case Operation.UNIT_FIRE:
				result = new UnitFireSetter(owner, mainFrame, (UnitFire) operation);
				break;
			case Operation.UNIT_EXPLORE:
				result = new UnitExploreSetter(owner, mainFrame, (UnitExplore) operation);
				break;
			case Operation.UNIT_CHANGE_AI:
				result = new UnitChangeAISetter(owner, mainFrame, (UnitChangeAI) operation);
				break;
			case Operation.UNIT_CHANGE_HP:
				result = new UnitChangePropSetter(owner, mainFrame, (UnitChangeProp) operation);
				break;
			case Operation.PLAYER_RECEIVE_KEY:
				result = new PlayerReceiveKeySetter(owner, mainFrame, (PlayerReceiveKey) operation);
				break;
			case Operation.PLAYER_OUT_SCREEN:
				result = new PlayerOutScreenSetter(owner, mainFrame, (PlayerOutScreen) operation);
				break;
			case Operation.BUILDING_EXPLORE:
				result = new BuildingExploreSetter(owner, mainFrame, (BuildingExplore) operation);
				break;
			case Operation.CAMERA_FADE_IN:
				result = new CameraFadeInSetter(owner, mainFrame, (CameraFadeIn) operation);
				break;
			case Operation.CAMERA_FADE_OUT:
				result = new CameraFadeOutSetter(owner, mainFrame, (CameraFadeOut) operation);
				break;
			case Operation.CAMERA_MOVE:
			case Operation.CAMERA_INSTANT_MOVE:
				result = new CameraMoveSetter(owner, mainFrame, (CameraMove) operation);
				break;
			case Operation.CAMERA_FOCUS_UNIT:
				result = new CameraFocusUnitSetter(owner, mainFrame, (CameraFocusUnit) operation);
				break;
			case Operation.CAMERA_SHAKE:
				result = new CameraShakeSetter(owner, mainFrame, (CameraShake) operation);
				break;
			case Operation.CAMERA_RECT:
				result = new CameraRectSetter(owner, mainFrame, (CameraRect) operation);
				break;
			case Operation.CAMERA_EFFECT:
				result = new CameraEffectSetter(owner, mainFrame, (CameraEffect) operation);
				break;
			case Operation.PLAY_MUSIC:
				result = new PlayMusicSetter(owner, mainFrame, (PlayMusic)operation);
				break;
			case Operation.PLAY_ANIM:
				result = new PlayAnimSetter(owner, mainFrame, (PlayAnim)operation);
				break;
			case Operation.CHANGE_MAP:
				result = new ChangeMapSetter(owner, mainFrame, (ChangeMap)operation);
				break;
			default:
				result = null;
				break;
		}
		return result;
	}
}